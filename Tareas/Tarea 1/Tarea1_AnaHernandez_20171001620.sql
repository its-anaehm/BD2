
-- ENLACE AL VIDEO DE EXPLICACIÓN: https://youtu.be/LAVp9dDroKs

/*
  EJERCICIO #1: Crear un campo autoincrementable en todas las llaves primarias de cada una de las tablas de la base de datos (excluir las tablas 
  JOB_GRADES y JOB_HISTORY), el aumento de las secuencias debe ser de 2 en 2 y deben comenzar en el valor de 20. Realizar al menos 2 Insert en cada 
  tabla que permita comprobar el funcionamiento de la secuencia. No utilizar tiggers para gestionar estas secuencias.
*/

-- Secuencia para la tabla COUNTRIES
CREATE SEQUENCE SQ_TABLA_COUNTRIES
START WITH 20
INCREMENT BY 2;

INSERT INTO COUNTRIES VALUES (SQ_TABLA_COUNTRIES.NEXTVAL, 'Mexico', 2); 
INSERT INTO COUNTRIES VALUES (SQ_TABLA_COUNTRIES.NEXTVAL, 'Honduras', 2); 

DECLARE
    VALOR_ACTUAL_SQ NUMBER;
BEGIN
    VALOR_ACTUAL_SQ:=SQ_TABLA_COUNTRIES.CURRVAL;
    DBMS_OUTPUT.PUT_LINE('EL VALOR ACTUAL DE LA SECUENCIA ES: '||VALOR_ACTUAL_SQ);
    COMMIT;
END;

-- Secuencia para la tabla DEPARTMENTS
CREATE SEQUENCE SQ_TABLA_DEPARTMENTS
START WITH 20
INCREMENT BY 2;

INSERT INTO DEPARTMENTS VALUES (SQ_TABLA_DEPARTMENTS.NEXTVAL, 'Security', 205, 1800); 
INSERT INTO DEPARTMENTS VALUES (SQ_TABLA_DEPARTMENTS.NEXTVAL, 'Information Technologies', 103, 1800);

DECLARE
    VALOR_ACTUAL_SQ NUMBER;
BEGIN
    VALOR_ACTUAL_SQ:=SQ_TABLA_DEPARTMENTS.CURRVAL;
    DBMS_OUTPUT.PUT_LINE('EL VALOR ACTUAL DE LA SECUENCIA ES: '||VALOR_ACTUAL_SQ);
    COMMIT;
END;

-- Secuencia para la tabla EMPLOYEES
CREATE SEQUENCE SQ_TABLA_EMPLOYEES
START WITH 20
INCREMENT BY 2;

INSERT INTO EMPLOYEES VALUES (SQ_TABLA_EMPLOYEES.NEXTVAL, 'Mateo', 'Reyes', 'mrey10@yahoo.es', '+50433998877', TO_DATE('28-05-1998', 'DD-MM-YYYY'), 
  'MK_MAN', 13500, 0.2, 100, 20);
INSERT INTO EMPLOYEES VALUES (SQ_TABLA_EMPLOYEES.NEXTVAL, 'Luis', 'Galo', 'lgalo5@yahoo.com', '+50433998877', TO_DATE('09-08-1995', 'DD-MM-YYYY'), 
  'SA_MAN', 10500, 0.4, 101, 10);

DECLARE
    VALOR_ACTUAL_SQ NUMBER;
BEGIN
    VALOR_ACTUAL_SQ:=SQ_TABLA_EMPLOYEES.CURRVAL;
    DBMS_OUTPUT.PUT_LINE('EL VALOR ACTUAL DE LA SECUENCIA ES: '||VALOR_ACTUAL_SQ);
    COMMIT;
END;

-- Secuencia para la tabla JOBS
CREATE SEQUENCE SQ_TABLA_JOBS
START WITH 20
INCREMENT BY 2;

INSERT INTO JOBS VALUES (SQ_TABLA_JOBS.NEXTVAL,'Information Technologies',18000, 30000);
INSERT INTO JOBS VALUES (SQ_TABLA_JOBS.NEXTVAL, 'Security Guard', 10000, 20000);

DECLARE
    VALOR_ACTUAL_SQ NUMBER;
BEGIN
    VALOR_ACTUAL_SQ:=SQ_TABLA_JOBS.CURRVAL;
    DBMS_OUTPUT.PUT_LINE('EL VALOR ACTUAL DE LA SECUENCIA ES: '||VALOR_ACTUAL_SQ);
    COMMIT;
END;

-- Secuencia para la tabla LOCATIONS
CREATE SEQUENCE SQ_TABLA_LOCATIONS
START WITH 20
INCREMENT BY 2;

INSERT INTO LOCATIONS VALUES (SQ_TABLA_LOCATIONS.NEXTVAL, '1121 Brooklyn', '10001', 'New York', 'New York', 'US');
INSERT INTO LOCATIONS VALUES (SQ_TABLA_LOCATIONS.NEXTVAL, 'Station Rd, A5127', 'B1 1AA', 'Birmingham', 'West Midlands', 'UK');

DECLARE
    VALOR_ACTUAL_SQ NUMBER;
BEGIN
    VALOR_ACTUAL_SQ:=SQ_TABLA_LOCATIONS.CURRVAL;
    DBMS_OUTPUT.PUT_LINE('EL VALOR ACTUAL DE LA SECUENCIA ES: '||VALOR_ACTUAL_SQ);
    COMMIT;
END;

-- Secuencia para la tabla REGIONS
CREATE SEQUENCE SQ_TABLA_REGIONS
START WITH 20
INCREMENT BY 2;

INSERT INTO REGIONS VALUES (SQ_TABLA_REGIONS.NEXTVAL, 'Oceanía');
INSERT INTO REGIONS VALUES (SQ_TABLA_REGIONS.NEXTVAL, 'Antartida');

DECLARE
    VALOR_ACTUAL_SQ NUMBER;
BEGIN
    VALOR_ACTUAL_SQ:=SQ_TABLA_REGIONS.CURRVAL;
    DBMS_OUTPUT.PUT_LINE('EL VALOR ACTUAL DE LA SECUENCIA ES: '||VALOR_ACTUAL_SQ);
    COMMIT;
END;

/*
  EJERCICIO #2: Crear un bloque anónimo que imprima en pantalla la siguiente información JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY, DEPARTMENT_ID, 
  DEPARTMENT_NAME, START_DATE, END_DATE y NOMBRE COMPLETO del empleado. Este bloque anónimo debe mostrar todos los registros obtenidos en la consulta.
*/

DECLARE	
	CURSOR CDATOS_EMPLEADO IS 
		SELECT EMPLOYEES.FIRST_NAME, EMPLOYEES.LAST_NAME, JOBS.JOB_TITLE, JOBS.JOB_ID, JOBS.MIN_SALARY, JOBS.MAX_SALARY, DEPARTMENTS.DEPARTMENT_NAME, DEPARTMENTS.DEPARTMENT_ID,
      JOB_HISTORY.START_DATE, JOB_HISTORY.END_DATE
      FROM EMPLOYEES LEFT JOIN JOBS ON EMPLOYEES.JOB_ID=JOBS.JOB_ID LEFT JOIN JOB_HISTORY ON JOBS.JOB_ID=JOB_HISTORY.JOB_ID 
      LEFT JOIN DEPARTMENTS ON JOB_HISTORY.DEPARTMENT_ID=DEPARTMENTS.DEPARTMENT_ID; 
  REGISTRO CDATOS_EMPLEADO%ROWTYPE;
BEGIN
	OPEN CDATOS_EMPLEADO;
	LOOP
		FETCH CDATOS_EMPLEADO INTO REGISTRO;
      DBMS_OUTPUT.PUT_LINE('NOMBRE: '||CONCAT(REGISTRO.FIRST_NAME,REGISTRO.LAST_NAME));
      DBMS_OUTPUT.PUT_LINE('PUESTO: '||REGISTRO.JOB_TITLE);
      DBMS_OUTPUT.PUT_LINE('ID DE PUESTO: '||REGISTRO.JOB_ID);
      DBMS_OUTPUT.PUT_LINE('SALARIO MINIMO: '||REGISTRO.MIN_SALARY);
      DBMS_OUTPUT.PUT_LINE('SALARIO MÁXIMO: '||REGISTRO.MAX_SALARY);
      DBMS_OUTPUT.PUT_LINE('FECHA DE INICIO: '||REGISTRO.START_DATE);
      DBMS_OUTPUT.PUT_LINE('FECHA FINAL: '||REGISTRO.END_DATE);
      DBMS_OUTPUT.PUT_LINE('DEPARTAMENTO: '||REGISTRO.DEPARTMENT_NAME);
      DBMS_OUTPUT.PUT_LINE('ID DE DEPARTAMENTO: '||REGISTRO.DEPARTMENT_ID);
      DBMS_OUTPUT.PUT_LINE('--------------------------------------');
      DBMS_OUTPUT.PUT_LINE(CHR(13));
	END LOOP;
	CLOSE CDATOS_EMPLEADO;

END;

/*
  EJERCICIO #3: Crear una tabla llamada REGISTRO_LOGS que tenga los campos ID_LOG NUMBER, FECHA_LOG TIMESTAMP, DESCRIPCION_LOG VARCHAR2(200), 
  USUARIO VARCHAR2(50), TIPO_OPERACION VARCHAR2(50), TABLA_AFECTADA VARCHAR2(200). El campo ID_LOG debe guardar valores secuenciales gestionados 
  mediante un Trigger y se deben aumentar de 3 en 3. El campo TIPO_OPERACION guardará si la operación fue un INSERT, DELETE o UPDATE.
*/


-- Creación de la Tabla
CREATE TABLE REGISTRO_LOGS (
  ID_LOG NUMBER,
  FECHA_LOG TIMESTAMP,
  DESCRIPCION_LOG VARCHAR2(200),
  USUARIO VARCHAR2(50),
  TIPO_OPERACION VARCHAR2(50),
  TABLA_AFECTADA VARCHAR2(200)
);

-- Creación de la Secuencia
CREATE SEQUENCE SQ_REGISTROS_LOGS
START WITH 3
INCREMENT BY 3;

-- Creación del Trigger
CREATE OR REPLACE TRIGGER TG_SQ_REGISTROS_LOGS
AFTER INSERT OR UPDATE OR DELETE ON COUNTRIES
FOR EACH ROW
BEGIN
  
  IF (INSERTING) THEN
        INSERT INTO REGISTROS_LOGS VALUES (SQ_REGISTROS_LOGS.NEXTVAL, SYSTIMESTAMP, 'SE REALIZO UN INSERT EN LA TABLA COUNTRIES.',USER, 'INSERT',
        'COUNTRIES');
    END IF;

    IF (UPDATING) THEN
        INSERT INTO REGISTROS_LOGS VALUES (SQ_REGISTROS_LOGS.NEXTVAL, SYSTIMESTAMP, 'SE REALIZO UN UPDATE EN LA TABLA COUNTRIES.',USER, 'UPDATE',
        'COUNTRIES');
    END IF;

    IF (DELETING) THEN
        INSERT INTO REGISTROS_LOGS VALUES (SQ_REGISTROS_LOGS.NEXTVAL, SYSTIMESTAMP, 'SE REALIZO UN DELETE EN LA TABLA COUNTRIES.',USER, 'DELETE',
        'COUNTRIES');
    END IF;
END;

BEGIN
    INSERT INTO COUNTRIES VALUES ('HN', 'Honduras', 2);
    --UPDATE COUNTRIES SET COUNTRY_NAME='HONDURAS' WHERE COUNTRY_NAME='Honduras';
    --DELETE FROM COUNTRIES WHERE COUNTRY_NAME='HONDURAS';
    COMMIT;
END;

/*
    EJERCICIO #4: Crear tres Triggers, uno en la tabla EMPLOYEES que se ejecute después de realizar un INSERT, otro en la tabla DEPARTMENTS que se ejecute antes de 
    realizar un UPDATE y el último trigger en la tabla JOB_HISTORY que se ejecute después de realizar un DELETE. Todos los triggers deben guardar la información en 
    la tabla REGISTRO_LOGS de las operaciones de inserción, actualización o delete.
*/

-- TRIGGER1
CREATE OR REPLACE TRIGGER tblEmp_Insert
AFTER INSERT ON EMPLOYEES
FOR EACH ROW
BEGIN
    INSERT INTO REGISTRO_LOGS VALUES (10,SYSDATE, 'SE INSERTÓ UN NUEVO REGISTRO EN LA TABLA EMPLEADOS', USER, 'INSERT', 'EMPLEADOS');
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
END;

BEGIN
    INSERT INTO EMPLOYEES VALUES (12, 'Mateo', 'Reyes', 'mrey10@yahoo.es', '+50433998877', TO_DATE('28-05-1998', 'DD-MM-YYYY'), 
    'MK_MAN', 13500, 0.2, 100, 20);
    COMMIT;
END;

----------------------------------------------------------------------------------

-- TRIGGER2
CREATE OR REPLACE TRIGGER tblDepts_Update
BEFORE UPDATE ON DEPARTMENTS
FOR EACH ROW
BEGIN
    INSERT INTO REGISTRO_LOGS (FECHA_LOG, DESCRIPCION_LOG, USUARIO, TIPO_OPERACION, TABLA_AFECTADA) VALUES (SYSDATE, 'SE ACTUALIZÓ UN REGISTRO EN 
    LA TABLA DEPARTMENTS', USER, 'UPDATE', 'DEPARTMENTS');
END;

BEGIN
    UPDATE DEPARTMENTS SET DEPARTMENT_ID=10 WHERE DEPARTMENT_ID=5;
END;

---------------------------------------------------------------------------------

-- TRIGGER3
CREATE OR REPLACE TRIGGER tblJobHistory_Update
AFTER DELETE ON JOB_HISTORY
FOR EACH ROW
BEGIN
    INSERT INTO REGISTRO_LOGS (FECHA_LOG, DESCRIPCION_LOG, USUARIO, TIPO_OPERACION, TABLA_AFECTADA) VALUES (SYSDATE, 'SE ELIMINÓ UN REGISTRO EN 
    LA TABLA JOBS_HISTORY', USER, 'DELETE', 'JOB_HISTORY');
END;

BEGIN
    DELETE FROM JOB_HISTORY WHERE EMPLOYEE_ID='102';
END;