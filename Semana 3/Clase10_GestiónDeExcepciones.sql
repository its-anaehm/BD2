-- Clase 10 - Gestión de Excepciones

    -- Capturando Excepciones 
    /*
    Se utiliza SQLCODE para saber cual es el código de error.
    Se utiliza SQLERRM para mostrar el mensaje de error.
    */
DECLARE
    NOMBRE PRODUCTS.PRODUCT_NAME%TYPE;
BEGIN
    SELECT PRODUCT_NAME INTO NOMBRE FROM PRODUCTS;

    DBMS_OUTPUT.PUT_LINE('EL NOMBRE DEL PRODUCTO CON ID 1 ES: '||NOMBRE);

    EXCEPTION
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('SE RETORNAN MUCHOS REGISTROS EN LA SENTENCIA SELECT INTO. EL CODIGO DEL ERROR ES: '||SQLCODE);
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;

    -- Excepción para tipos de datos incompatibles
DECLARE
    NOMBRE PRODUCTS.PRODUCT_NAME%TYPE;
    FECHA DATE;
BEGIN
    FECHA:='HOLA MUNDO';
    SELECT PRODUCT_NAME INTO NOMBRE FROM PRODUCTS;

    DBMS_OUTPUT.PUT_LINE('EL NOMBRE DEL PRODUCTO CON ID 1 ES: '||NOMBRE);

    EXCEPTION
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('SE RETORNAN MUCHOS REGISTROS EN LA SENTENCIA SELECT INTO. EL CODIGO DEL ERROR ES: '||SQLCODE);
            DBMS_OUTPUT.PUT_LINE(SQLERRM);
        WHEN OTHERS THEN
            IF(SQLCODE=-1858) THEN
                DBMS_OUTPUT.PUT_LINE('SE ESTAN ASIGNANDO TIPOS DE DATOS INCOMPATIBLES');
        END IF;
END;

    --Excepción para un código que no existe
DECLARE
    NOMBRE PRODUCTS.PRODUCT_NAME%TYPE;
    FECHA DATE;
BEGIN
    FECHA:=SYSDATE;
    SELECT PRODUCT_NAME INTO NOMBRE FROM PRODUCTS WHERE PRODUCT_ID=10000;

    DBMS_OUTPUT.PUT_LINE('EL NOMBRE DEL PRODUCTO CON ID 1 ES: '||NOMBRE);

    EXCEPTION
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('SE RETORNAN MUCHOS REGISTROS EN LA SENTENCIA SELECT INTO. EL CODIGO DEL ERROR ES: '||SQLCODE);
            DBMS_OUTPUT.PUT_LINE(SQLERRM);
        WHEN OTHERS THEN
            IF(SQLCODE=-1858) THEN
            DBMS_OUTPUT.PUT_LINE('SE ESTAN ASIGNANDO TIPOS DE DATOS INCOMPATIBLES.');
            ELSIF (SQLCODE=100) THEN
            DBMS_OUTPUT.PUT_LINE('EL SELECT INTO NO ENCONTRÓ DATOS.');
        END IF;
END;

    -- Creando variables para almacenar los códigos y mensajes de error
DECLARE
    NOMBRE PRODUCTS.PRODUCT_NAME%TYPE;
    FECHA DATE;
    CODIGO_ERROR NUMBER;
    MENSAJE_ERROR VARCHAR2(1000);
BEGIN
    FECHA:=SYSDATE;
    SELECT PRODUCT_NAME INTO NOMBRE FROM PRODUCTS WHERE PRODUCT_ID=10000;

    DBMS_OUTPUT.PUT_LINE('EL NOMBRE DEL PRODUCTO CON ID 1 ES: '||NOMBRE);

    EXCEPTION
        WHEN TOO_MANY_ROWS THEN
            CODIGO_ERROR:=SQLCODE;
            MENSAJE_ERROR:=SQLERRM;
            DBMS_OUTPUT.PUT_LINE('SE RETORNAN MUCHOS REGISTROS EN LA SENTENCIA SELECT INTO. EL CODIGO DEL ERROR ES: '||CODIGO_ERROR);
            DBMS_OUTPUT.PUT_LINE('EL MENSAJE DE ERROR ES: '||MENSAJE_ERROR);
        WHEN OTHERS THEN
            CODIGO_ERROR:=SQLCODE;
            MENSAJE_ERROR:=SQLERRM;
            IF(SQLCODE=-1858) THEN
                DBMS_OUTPUT.PUT_LINE('SE ESTAN ASIGNANDO TIPOS DE DATOS INCOMPATIBLES.');
                DBMS_OUTPUT.PUT_LINE('EL CODIGO DE ERROR ES: '||CODIGO_ERROR);
                DBMS_OUTPUT.PUT_LINE('EL MENSAJE DE ERROR ES: '||MENSAJE_ERROR);
            ELSIF (SQLCODE=100) THEN
                DBMS_OUTPUT.PUT_LINE('EL SELECT INTO NO ENCONTRÓ DATOS.');
                DBMS_OUTPUT.PUT_LINE('EL CODIGO DE ERROR ES: '||CODIGO_ERROR);
                DBMS_OUTPUT.PUT_LINE('EL MENSAJE DE ERROR ES: '||MENSAJE_ERROR);
            END IF;
END;